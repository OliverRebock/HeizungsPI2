#!/b# Konfiguration
PI_HOST="pi@192.168.178.78"
PI_PATH="/home/pi/heizung-monitor"
LOCAL_PATH="."ash
# Deployment-Skript f√ºr Windows zu Raspberry Pi 5
# F√ºhre dieses Skript auf Windows (Git Bash/WSL) aus

# Konfiguration
PI_HOST="pi@192.168.1.100"  # ‚ö†Ô∏è √ÑNDERE DIESE IP-ADRESSE ZU DEINER RASPBERRY PI IP!
PI_PATH="/home/pi/heizung-monitor"
LOCAL_PATH="."

echo "üöÄ Deploying Heizungs√ºberwachung to Raspberry Pi 5"
echo "================================================="

# Farben f√ºr Output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Pr√ºfe ob SSH-Verbindung funktioniert
echo -e "${YELLOW}Teste SSH-Verbindung zu $PI_HOST...${NC}"
if ! ssh -o ConnectTimeout=5 $PI_HOST "echo 'SSH-Verbindung erfolgreich'"; then
    echo -e "${RED}‚ùå SSH-Verbindung fehlgeschlagen!${NC}"
    echo ""
    echo "M√∂gliche L√∂sungen:"
    echo "1. IP-Adresse in diesem Skript anpassen (Zeile 5)"
    echo "2. SSH auf dem Pi aktivieren: sudo systemctl enable ssh"
    echo "3. SSH-Keys einrichten f√ºr passwortlose Anmeldung"
    echo ""
    exit 1
fi

echo -e "${GREEN}‚úÖ SSH-Verbindung erfolgreich${NC}"

# Projekt-Ordner auf Pi erstellen
echo -e "${YELLOW}Erstelle Projekt-Ordner auf Pi...${NC}"
ssh $PI_HOST "mkdir -p $PI_PATH"

# Dateien √ºbertragen (mit Ausschl√ºssen)
echo -e "${YELLOW}√úbertrage Projekt-Dateien...${NC}"
rsync -avz --progress \
    --exclude='.git' \
    --exclude='__pycache__' \
    --exclude='*.pyc' \
    --exclude='*.pyo' \
    --exclude='.env' \
    --exclude='venv' \
    --exclude='node_modules' \
    --exclude='.DS_Store' \
    --exclude='Thumbs.db' \
    $LOCAL_PATH/ $PI_HOST:$PI_PATH/

echo -e "${GREEN}‚úÖ Upload abgeschlossen!${NC}"

# Installation auf Pi ausf√ºhren
echo ""
echo -e "${YELLOW}F√ºhre Installation auf Pi aus...${NC}"
echo "Das kann einige Minuten dauern..."

ssh $PI_HOST "cd $PI_PATH && chmod +x install_rpi5.sh && sudo bash install_rpi5.sh"

echo ""
echo "============================================"
echo -e "${GREEN}üéâ Deployment erfolgreich abgeschlossen!${NC}"
echo "============================================"
echo ""

# N√§chste Schritte anzeigen
echo -e "${YELLOW}üìã N√§chste Schritte:${NC}"
echo ""
echo "1. üîÑ Raspberry Pi neu starten:"
echo "   ssh $PI_HOST 'sudo reboot'"
echo ""
echo "2. üå°Ô∏è Nach dem Neustart - Sensoren pr√ºfen:"
echo "   ssh $PI_HOST 'ls /sys/bus/w1/devices/28-*'"
echo ""
echo "3. üóÑÔ∏è InfluxDB konfigurieren:"
echo "   http://$(ssh $PI_HOST 'hostname -I | awk "{print \$1}"' 2>/dev/null):8086"
echo ""
echo "4. ‚öôÔ∏è Konfiguration anpassen:"
echo "   ssh $PI_HOST"
echo "   cd $PI_PATH"
echo "   nano .env"
echo "   nano config/heating_circuits.yaml"
echo ""
echo "5. üß™ Sensoren testen:"
echo "   ssh $PI_HOST 'cd $PI_PATH && source venv/bin/activate && python test_sensors.py'"
echo ""
echo "6. üöÄ Service starten:"
echo "   ssh $PI_HOST 'sudo systemctl start heizung-monitor'"
echo ""
echo "7. üìä Grafana √∂ffnen:"
echo "   http://$(ssh $PI_HOST 'hostname -I | awk "{print \$1}"' 2>/dev/null):3000"
echo ""
echo "8. üìù Logs √ºberwachen:"
echo "   ssh $PI_HOST 'sudo journalctl -u heizung-monitor -f'"
echo ""

# IP-Adresse des Pi anzeigen
PI_IP=$(ssh $PI_HOST 'hostname -I | awk "{print \$1}"' 2>/dev/null)
if [ ! -z "$PI_IP" ]; then
    echo -e "${GREEN}üåê Raspberry Pi IP-Adresse: $PI_IP${NC}"
    echo ""
    echo "Bookmarks f√ºr deinen Browser:"
    echo "- InfluxDB: http://$PI_IP:8086"
    echo "- Grafana: http://$PI_IP:3000"
fi

echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Wichtig: Neustart erforderlich f√ºr 1-Wire Interface!${NC}"
