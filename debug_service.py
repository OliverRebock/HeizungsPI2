#!/usr/bin/env python3
"""
Service Debug Script
Testet die grundlegenden Funktionen ohne kompletten Service-Start
"""

import sys
import os
from pathlib import Path

# Projekt-Root hinzuf√ºgen
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def test_imports():
    """Testet alle wichtigen Imports"""
    print("üîç Teste Python-Imports...")
    
    # Standard-Bibliotheken
    try:
        import time, signal, logging, datetime
        print("‚úÖ Standard-Bibliotheken: OK")
    except ImportError as e:
        print(f"‚ùå Standard-Bibliotheken: {e}")
        return False
    
    # Dotenv
    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv: OK")
    except ImportError:
        print("‚ö†Ô∏è python-dotenv: Nicht verf√ºgbar (optional)")
    
    # Projekt-Module
    modules_ok = True
    
    try:
        from src.sensors.heating_sensors import HeatingSystemManager
        print("‚úÖ HeatingSystemManager: OK")
    except ImportError as e:
        print(f"‚ùå HeatingSystemManager: {e}")
        modules_ok = False
    
    try:
        from src.sensors.dht22_sensor import HeatingRoomSensor
        print("‚úÖ HeatingRoomSensor: OK")
    except ImportError as e:
        print(f"‚ö†Ô∏è HeatingRoomSensor: {e} (optional)")
    
    try:
        from src.database.influxdb_client import HeatingInfluxDBClient
        print("‚úÖ HeatingInfluxDBClient: OK")
    except ImportError as e:
        print(f"‚ùå HeatingInfluxDBClient: {e}")
        modules_ok = False
    
    return modules_ok

def test_environment():
    """Testet Umgebungsvariablen und Konfiguration"""
    print("\nüîç Teste Umgebung...")
    
    # .env Datei
    env_file = Path(".env")
    if env_file.exists():
        print("‚úÖ .env Datei gefunden")
        
        # Lade .env
        try:
            from dotenv import load_dotenv
            load_dotenv()
            print("‚úÖ .env Datei geladen")
        except ImportError:
            print("‚ö†Ô∏è python-dotenv nicht verf√ºgbar - verwende System-Umgebungsvariablen")
    else:
        print("‚ö†Ô∏è .env Datei nicht gefunden")
    
    # Wichtige Umgebungsvariablen
    required_vars = [
        'INFLUXDB_URL',
        'INFLUXDB_TOKEN', 
        'INFLUXDB_ORG',
        'INFLUXDB_BUCKET'
    ]
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {value[:20]}...")
        else:
            print(f"‚ö†Ô∏è {var}: Nicht gesetzt")
    
    # Config-Dateien
    config_file = Path("config/heating_circuits.yaml")
    if config_file.exists():
        print("‚úÖ Heizkreis-Konfiguration gefunden")
    else:
        print("‚ö†Ô∏è Heizkreis-Konfiguration fehlt")

def test_hardware():
    """Testet Hardware-Verf√ºgbarkeit"""
    print("\nüîç Teste Hardware...")
    
    # 1-Wire Interface
    w1_path = Path("/sys/bus/w1/devices")
    if w1_path.exists():
        sensors = list(w1_path.glob("28-*"))
        print(f"‚úÖ 1-Wire Interface: {len(sensors)} DS18B20 Sensoren gefunden")
        
        for sensor in sensors[:3]:  # Zeige nur erste 3
            print(f"   üì° {sensor.name}")
    else:
        print("‚ùå 1-Wire Interface nicht verf√ºgbar")
    
    # GPIO f√ºr DHT22
    try:
        import RPi.GPIO as GPIO
        print("‚úÖ RPi.GPIO verf√ºgbar")
    except ImportError:
        print("‚ö†Ô∏è RPi.GPIO nicht verf√ºgbar (nicht auf Pi?)")

def test_services():
    """Testet externe Services"""
    print("\nüîç Teste Services...")
    
    # InfluxDB
    try:
        import requests
        response = requests.get("http://localhost:8086/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ InfluxDB erreichbar")
        else:
            print(f"‚ö†Ô∏è InfluxDB antwortet mit Status {response.status_code}")
    except ImportError:
        print("‚ö†Ô∏è requests nicht verf√ºgbar f√ºr InfluxDB-Test")
    except Exception as e:
        print(f"‚ùå InfluxDB nicht erreichbar: {e}")
    
    # Docker Container
    try:
        import subprocess
        result = subprocess.run(['docker', 'ps'], capture_output=True, text=True)
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            containers = len(lines) - 1  # Header abziehen
            print(f"‚úÖ Docker: {containers} Container laufen")
        else:
            print("‚ùå Docker nicht verf√ºgbar")
    except FileNotFoundError:
        print("‚ùå Docker Command nicht gefunden")
    except Exception as e:
        print(f"‚ùå Docker-Fehler: {e}")

def test_minimal_run():
    """Testet minimalen Programmlauf"""
    print("\nüîç Teste minimalen Programmlauf...")
    
    try:
        # Teste basic imports
        from src.sensors.heating_sensors import HeatingSystemManager
        
        # Teste Initialisierung
        manager = HeatingSystemManager()
        circuit_count = manager.get_circuit_count()
        print(f"‚úÖ HeatingSystemManager: {circuit_count} Kreise")
        
        # Teste InfluxDB Client
        from src.database.influxdb_client import HeatingInfluxDBClient
        client = HeatingInfluxDBClient()
        print("‚úÖ InfluxDB Client initialisiert")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Minimaler Test fehlgeschlagen: {e}")
        return False

def main():
    """Hauptfunktion f√ºr Service-Debug"""
    print("üîß Heizungs√ºberwachung - Service Debug")
    print("=" * 50)
    
    # Arbeitsverzeichnis
    print(f"üìÇ Arbeitsverzeichnis: {os.getcwd()}")
    print(f"üêç Python-Version: {sys.version}")
    print()
    
    # Tests ausf√ºhren
    tests_passed = 0
    total_tests = 5
    
    if test_imports():
        tests_passed += 1
    
    test_environment()
    tests_passed += 1
    
    test_hardware()
    tests_passed += 1
    
    test_services()
    tests_passed += 1
    
    if test_minimal_run():
        tests_passed += 1
    
    # Ergebnis
    print("\n" + "=" * 50)
    print(f"üìä Ergebnis: {tests_passed}/{total_tests} Tests bestanden")
    
    if tests_passed >= 4:
        print("‚úÖ System sollte funktionsf√§hig sein")
        return 0
    elif tests_passed >= 2:
        print("‚ö†Ô∏è System teilweise funktionsf√§hig - pr√ºfe Warnungen")
        return 1
    else:
        print("‚ùå System nicht funktionsf√§hig - behebe Fehler")
        return 2

if __name__ == "__main__":
    sys.exit(main())
